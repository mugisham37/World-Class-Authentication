generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  email                  String                  @unique
  emailVerified          Boolean                 @default(false)
  username               String?                 @unique
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  lastLoginAt            DateTime?
  status                 UserStatus              @default(PENDING)
  role                   UserRole                @default(USER)
  active                 Boolean                 @default(true)
  failedLoginAttempts    Int                     @default(0)
  lockedUntil            DateTime?
  adminApprovals         AdminApproval[]
  auditLogs              AuditLog[]
  certificateCredentials CertificateCredential[]
  credentials            Credential[]
  dataSubjectRequests    DataSubjectRequest[]
  magicLinks             MagicLink[]
  mfaFactors             MfaFactor[]
  otps                   OTP[]
  passwordHistory        PasswordHistory[]
  passwordlessSessions   PasswordlessSession[]
  recoveryMethods        RecoveryMethod[]
  recoveryRequests       RecoveryRequest[]
  securityQuestions      SecurityQuestion[]
  sessions               Session[]
  trustedContacts        TrustedContact[]
  profile                UserProfile?
  webAuthnCredentials    WebAuthnCredential[]

  @@map("users")
}

model UserProfile {
  id        String    @id @default(uuid())
  userId    String    @unique
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  birthDate DateTime?
  bio       String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Credential {
  id              String            @id @default(uuid())
  userId          String
  type            CredentialType
  identifier      String
  secret          String
  algorithm       String?
  salt            String?
  iterations      Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHistory PasswordHistory[]

  @@unique([userId, type])
  @@index([identifier])
  @@map("credentials")
}

model PasswordHistory {
  id           String     @id @default(uuid())
  userId       String
  credentialId String
  passwordHash String
  createdAt    DateTime   @default(now())
  credential   Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model Session {
  id               String    @id @default(uuid())
  userId           String
  token            String    @unique
  refreshToken     String?   @unique
  ipAddress        String?
  userAgent        String?
  deviceId         String?
  deviceType       String?
  location         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  expiresAt        DateTime
  lastActiveAt     DateTime  @default(now())
  revokedAt        DateTime?
  revocationReason String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model AuditLog {
  id         String      @id @default(uuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime    @default(now())
  status     AuditStatus @default(SUCCESS)
  user       User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model RecoveryToken {
  id        String            @id @default(uuid())
  token     String            @unique
  type      RecoveryTokenType
  userId    String?
  email     String?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime          @default(now())
  metadata  Json?

  @@index([token])
  @@index([userId])
  @@index([email])
  @@map("recovery_tokens")
}

model MfaFactor {
  id            String          @id @default(uuid())
  userId        String
  type          MfaFactorType
  name          String
  secret        String?
  credentialId  String?
  phoneNumber   String?
  email         String?
  deviceToken   String?
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastUsedAt    DateTime?
  verifiedAt    DateTime?
  status        MfaFactorStatus @default(PENDING)
  mfaChallenges MfaChallenge[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("mfa_factors")
}

model MfaChallenge {
  id          String             @id @default(uuid())
  factorId    String
  challenge   String
  response    String?
  expiresAt   DateTime
  createdAt   DateTime           @default(now())
  completedAt DateTime?
  status      MfaChallengeStatus @default(PENDING)
  attempts    Int                @default(0)
  metadata    Json?
  factor      MfaFactor          @relation(fields: [factorId], references: [id], onDelete: Cascade)

  @@index([factorId])
  @@map("mfa_challenges")
}

model RecoveryMethod {
  id         String               @id @default(uuid())
  userId     String
  type       RecoveryMethodType
  name       String
  status     RecoveryMethodStatus @default(ACTIVE)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  lastUsedAt DateTime?
  metadata   Json?
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("recovery_methods")
}

model SecurityQuestion {
  id         String   @id @default(uuid())
  userId     String
  question   String
  answerHash String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("security_questions")
}

model TrustedContact {
  id           String               @id @default(uuid())
  userId       String
  name         String
  email        String
  phone        String?
  relationship String?
  status       TrustedContactStatus @default(PENDING)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  verifiedAt   DateTime?
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("trusted_contacts")
}

model RecoveryRequest {
  id             String                @id @default(uuid())
  userId         String
  type           RecoveryRequestType
  status         RecoveryRequestStatus @default(PENDING)
  initiatedAt    DateTime              @default(now())
  completedAt    DateTime?
  ipAddress      String?
  userAgent      String?
  metadata       Json?
  adminApprovals AdminApproval[]
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("recovery_requests")
}

model AdminApproval {
  id                String              @id @default(uuid())
  recoveryRequestId String
  adminId           String
  status            AdminApprovalStatus @default(PENDING)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  admin             User                @relation(fields: [adminId], references: [id], onDelete: Cascade)
  recoveryRequest   RecoveryRequest     @relation(fields: [recoveryRequestId], references: [id], onDelete: Cascade)

  @@index([recoveryRequestId])
  @@index([adminId])
  @@map("admin_approvals")
}

model DataSubjectRequest {
  id                  String                   @id @default(uuid())
  type                DataSubjectRequestType
  status              DataSubjectRequestStatus @default(PENDING_VERIFICATION)
  email               String
  firstName           String?
  lastName            String?
  userId              String?
  requestReason       String?
  additionalInfo      Json?
  requestedBy         String?
  ipAddress           String?
  userAgent           String?
  verificationToken   String?
  expiresAt           DateTime?
  verifiedAt          DateTime?
  processingStartedAt DateTime?
  completedAt         DateTime?
  result              Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  user                User?                    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("data_subject_requests")
}

model RiskAssessment {
  id          String    @id @default(uuid())
  userId      String?
  sessionId   String?
  ipAddress   String?
  userAgent   String?
  deviceId    String?
  location    String?
  riskLevel   String
  riskFactors Json
  riskScore   Float?
  action      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?
  resolution  String?

  @@map("risk_assessment")
}

model WebAuthnCredential {
  id           String    @id @default(uuid())
  userId       String
  credentialId String    @unique
  publicKey    Bytes
  counter      Int
  deviceType   String    @default("unknown")
  deviceName   String?
  transports   String[]
  metadata     Json      @default("{}")
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("webauthn_credentials")
}

model MagicLink {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("magic_links")
}

model OTP {
  id          String   @id @default(uuid())
  userId      String
  destination String
  code        String
  type        String
  expiresAt   DateTime
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("otps")
}

model CertificateCredential {
  id           String    @id @default(uuid())
  userId       String
  subjectDN    String
  issuerDN     String
  serialNumber String
  fingerprint  String    @unique
  notBefore    DateTime
  notAfter     DateTime
  metadata     Json      @default("{}")
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fingerprint])
  @@map("certificate_credentials")
}

model PasswordlessSession {
  id             String    @id @default(uuid())
  userId         String
  method         String
  identifier     String
  challengeId    String    @unique
  expiresAt      DateTime
  isRegistration Boolean   @default(false)
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  metadata       Json      @default("{}")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([challengeId])
  @@map("passwordless_sessions")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  LOCKED
  SUSPENDED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CredentialType {
  PASSWORD
  API_KEY
  OAUTH
}

enum AuditStatus {
  SUCCESS
  FAILURE
  WARNING
  INFO
}

enum RecoveryTokenType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  ACCOUNT_RECOVERY
  MFA_RECOVERY
}

enum MfaFactorType {
  TOTP
  WEBAUTHN
  SMS
  EMAIL
  RECOVERY_CODE
  PUSH_NOTIFICATION
}

enum MfaFactorStatus {
  ACTIVE
  PENDING
  DISABLED
  REVOKED
}

enum MfaChallengeStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
}

enum RecoveryMethodType {
  EMAIL
  SECURITY_QUESTIONS
  TRUSTED_CONTACTS
  RECOVERY_CODES
  ADMIN_RECOVERY
}

enum RecoveryMethodStatus {
  ACTIVE
  DISABLED
  PENDING
}

enum TrustedContactStatus {
  PENDING
  ACTIVE
  REVOKED
}

enum RecoveryRequestType {
  PASSWORD_RESET
  ACCOUNT_RECOVERY
  MFA_RESET
}

enum RecoveryRequestStatus {
  PENDING
  APPROVED
  DENIED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum AdminApprovalStatus {
  PENDING
  APPROVED
  DENIED
}

enum DataSubjectRequestType {
  ACCESS
  DELETION
  RECTIFICATION
  RESTRICTION
  PORTABILITY
  OBJECTION
}

enum DataSubjectRequestStatus {
  PENDING_VERIFICATION
  VERIFIED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
