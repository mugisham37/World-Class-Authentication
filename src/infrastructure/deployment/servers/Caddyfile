# Caddy configuration for World-Class-Authentication
# Optimized for simplicity, security, and automatic HTTPS

# Global options
{
    # Email for Let's Encrypt notifications
    email admin@yourdomain.com
    
    # Use HTTP/3
    servers {
        protocol {
            experimental_http3
        }
    }
    
    # Optimize storage usage
    storage file_system {
        root /var/lib/caddy
    }
    
    # Log settings
    log {
        output file /var/log/caddy/access.log
        format json
        level INFO
    }
}

# Main site configuration
auth.yourdomain.com {
    # Enable compression
    encode gzip zstd
    
    # Security headers
    header {
        # Security headers
        Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        X-XSS-Protection "1; mode=block"
        Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self'; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; form-action 'self'; upgrade-insecure-requests;"
        Referrer-Policy "strict-origin-when-cross-origin"
        Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
        
        # Remove Server header
        -Server
    }
    
    # Health check endpoint
    handle /health {
        reverse_proxy localhost:3000 {
            # Health check configuration
            health_path /health
            health_interval 30s
            health_timeout 5s
            health_status 200
            
            # Headers
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
        }
    }
    
    # API endpoints with rate limiting
    handle /api/* {
        # Rate limiting
        rate_limit {
            zone api_limit {
                key {remote_host}
                events 10
                window 1s
                burst 20
            }
        }
        
        # Reverse proxy to backend
        reverse_proxy {
            # Load balancing configuration
            lb_policy ip_hash
            
            # Backend servers
            to localhost:3000
            # Add more backend servers here for horizontal scaling
            # to localhost:3001
            # to localhost:3002
            
            # Timeouts
            timeout 60s
            
            # Headers
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Health checks
            health_path /health
            health_interval 10s
            health_timeout 5s
            health_status 200
            
            # Transport settings
            transport http {
                keepalive 32
                keepalive_idle_conns 32
                versions 1.1 2
            }
        }
    }
    
    # All other requests
    handle {
        # Reverse proxy to backend
        reverse_proxy {
            # Load balancing configuration
            lb_policy ip_hash
            
            # Backend servers
            to localhost:3000
            # Add more backend servers here for horizontal scaling
            # to localhost:3001
            # to localhost:3002
            
            # Timeouts
            timeout 60s
            
            # Headers
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Health checks
            health_path /health
            health_interval 10s
            health_timeout 5s
            health_status 200
            
            # Transport settings
            transport http {
                keepalive 32
                keepalive_idle_conns 32
                versions 1.1 2
            }
        }
    }
    
    # Log all requests
    log {
        output file /var/log/caddy/auth.yourdomain.com.log
        format json
    }
    
    # Error handling
    handle_errors {
        root * /var/www/html/errors
        rewrite * /{http.error.status_code}.html
        file_server
    }
}

# Redirect www to non-www
www.auth.yourdomain.com {
    redir https://auth.yourdomain.com{uri} permanent
}
