# HAProxy configuration for World-Class-Authentication
# Enterprise-grade load balancer optimized for high availability and performance

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # Maximum connections
    maxconn 50000
    
    # Run as user/group for security
    user haproxy
    group haproxy
    
    # Logging configuration
    log /dev/log local0
    log /dev/log local1 notice
    
    # Enable multithreading for better performance
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # SSL settings
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    
    # Increase the size of the Diffie-Hellman parameters
    tune.ssl.default-dh-param 2048
    
    # Increase timeouts for better performance
    tune.bufsize 32768
    tune.maxrewrite 8192
    
    # Enable runtime API
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

#---------------------------------------------------------------------
# Default settings
#---------------------------------------------------------------------
defaults
    # Use HTTP mode
    mode http
    
    # Logging
    log global
    option httplog
    option dontlognull
    
    # Timeouts
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout queue 30s
    timeout tunnel 1h
    timeout client-fin 30s
    timeout server-fin 30s
    
    # Error handling
    option redispatch
    retries 3
    
    # HTTP options
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option httpchk GET /health
    
    # Default error files
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

#---------------------------------------------------------------------
# Frontend for HTTP - Redirect to HTTPS
#---------------------------------------------------------------------
frontend http-in
    # Bind to port 80
    bind *:80
    
    # ACME HTTP-01 challenge support for Let's Encrypt
    acl is_acme path_beg /.well-known/acme-challenge/
    use_backend acme if is_acme
    
    # Redirect HTTP to HTTPS
    http-request redirect scheme https code 301 unless is_acme

#---------------------------------------------------------------------
# Frontend for HTTPS
#---------------------------------------------------------------------
frontend https-in
    # Bind to port 443 with SSL
    bind *:443 ssl crt /etc/ssl/certs/auth.yourdomain.com.pem alpn h2,http/1.1
    
    # HTTP/2 support
    option http-use-htx
    
    # Add security headers
    http-response set-header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self'; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; form-action 'self'; upgrade-insecure-requests;"
    http-response set-header Referrer-Policy strict-origin-when-cross-origin
    http-response set-header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
    
    # Remove server header
    http-response del-header Server
    
    # Define ACLs for routing
    acl is_health path /health
    acl is_api path_beg /api/
    
    # Rate limiting for API
    stick-table type ip size 200k expire 10m store http_req_rate(10s)
    http-request track-sc0 src if is_api
    http-request deny deny_status 429 if is_api { sc_http_req_rate(0) gt 20 }
    
    # Route to appropriate backend
    use_backend health-backend if is_health
    use_backend api-backend if is_api
    default_backend app-backend

#---------------------------------------------------------------------
# Backend for Let's Encrypt ACME challenges
#---------------------------------------------------------------------
backend acme
    server local 127.0.0.1:8888

#---------------------------------------------------------------------
# Backend for health checks
#---------------------------------------------------------------------
backend health-backend
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Load balancing algorithm
    balance roundrobin
    
    # Backend servers
    server auth1 127.0.0.1:3000 check inter 2s rise 2 fall 3 maxconn 100

#---------------------------------------------------------------------
# Backend for API endpoints
#---------------------------------------------------------------------
backend api-backend
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Load balancing algorithm - use consistent hashing for session stickiness
    balance source
    hash-type consistent
    
    # Connection settings
    option http-server-close
    option forwardfor
    
    # HTTP/2 support
    http-request set-header X-Forwarded-Proto https
    
    # Backend servers with weights and health checks
    server auth1 127.0.0.1:3000 check inter 5s rise 2 fall 3 weight 100 maxconn 500
    # Add more backend servers here for horizontal scaling
    # server auth2 127.0.0.1:3001 check inter 5s rise 2 fall 3 weight 100 maxconn 500
    # server auth3 127.0.0.1:3002 check inter 5s rise 2 fall 3 weight 100 maxconn 500

#---------------------------------------------------------------------
# Backend for all other application requests
#---------------------------------------------------------------------
backend app-backend
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Load balancing algorithm - use consistent hashing for session stickiness
    balance source
    hash-type consistent
    
    # Connection settings
    option http-server-close
    option forwardfor
    
    # HTTP/2 support
    http-request set-header X-Forwarded-Proto https
    
    # Backend servers with weights and health checks
    server auth1 127.0.0.1:3000 check inter 5s rise 2 fall 3 weight 100 maxconn 500
    # Add more backend servers here for horizontal scaling
    # server auth2 127.0.0.1:3001 check inter 5s rise 2 fall 3 weight 100 maxconn 500
    # server auth3 127.0.0.1:3002 check inter 5s rise 2 fall 3 weight 100 maxconn 500

#---------------------------------------------------------------------
# Statistics
#---------------------------------------------------------------------
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST
    stats auth admin:YourSecurePassword
